use   admindb;

SELECT COUNT(*) FROM LAYOFFS;  -- COUNTING MY DATA
  
SELECT * FROM LAYOFFS;  -- (CALLING OUT MY ORIGINAL LAYOFFS TABLE) 

-- REMOVING DUPLICATES 
CREATE TABLE LAYOFFS_STAGING LIKE LAYOFFS;  -- (CREATING A  ANOTHER TABLE ANF CALLING IT LAYOFFS_STAGING)

SELECT * FROM LAYOFFS_STAGING;  -- (CALLING OUT THE LAYOFFS_STAGING TABLE)

INSERT LAYOFFS_STAGING SELECT * FROM LAYOFFS;   -- (INSERTING THE LAYOFFS TABLE TO THE LAYOFFS_STAGING TABLE)

WITH LAYOFFS_STAGING_CTE AS (   -- CREATING CTES; CTE MEANING COMMON TABLE EXPRESSION
SELECT *, ROW_NUMBER() OVER (PARTITION BY COMPANY, LOCATION, INDUSTRY, TOTAL_LAID_OFF, PERCENTAGE_LAID_OFF, DATE, STAGE, COUNTRY, FUNDS_RAISED_MILLIONS) AS ID
FROM LAYOFFS_STAGING)   -- ADDING ID TO MY TABLE 
SELECT * FROM LAYOFFS_STAGING_CTE
WHERE ID >1;

-- CALLING OUT COMPANY TO SEE IF THERE IS DUPLIACTE 
SELECT * FROM LAYOFFS_STAGING WHERE COMPANY = 'CASPER';


-- CREATING A LAYOFFS_STAGING2 TABLE TO DELETE DUPLICATE 
CREATE TABLE layoffs_STAGING2 (
  company text,
  location text,
  industry text,
  total_laid_off int DEFAULT NULL,
  percentage_laid_off text,
  date text,
  stage text,
  country text,
  funds_raised_millions int DEFAULT NULL,
  ID INT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

SELECT * FROM LAYOFFS_STAGING2;  -- (CALLING OUT THE LAYOFFS_STAGING TABLE)

-- INSERTING INTO TABLE LAYOFFS_STAGING2
INSERT INTO LAYOFFS_STAGING2
SELECT*, ROW_NUMBER() OVER (PARTITION BY COMPANY, LOCATION, INDUSTRY, TOTAL_LAID_OFF, PERCENTAGE_LAID_OFF, DATE, STAGE, COUNTRY, FUNDS_RAISED_MILLIONS) AS ID
FROM LAYOFFS_STAGING; -- )


-- CHECKING FOR DUPLICATE
SELECT * FROM LAYOFFS_STAGING2
WHERE ID>1;  


-- DELETING THE DUPLICATE I CALLED OUT
DELETE FROM LAYOFFS_STAGING2
WHERE ID >1;   -- END OF DUPLICATE REMOVAL 

select * from layoffs_staging2 where id >1;

select count(*) from layoffs_staging2;

 
-- 2. STANDARDIZING DATA: MEANING FINDING ISSUES IN YOUR DATA AND FIXING IT.

-- TRIM MEANS TO TAKE OFF THE WHITE SPACE FIRST 


SELECT DISTINCT (TRIM(COMPANY)) FROM LAYOFFS_STAGING2;  -- SELECTING UNQIUE COLUMN FIRST 

 SELECT COMPANY, TRIM(COMPANY) FROM LAYOFFS_STAGING2; 
 
 -- SET THE COMPANY TO TRIM
 UPDATE LAYOFFS_STAGING2
 SET COMPANY = TRIM(COMPANY);  -- UPDATING TABLE LAYOFFS_STAGING2
 
 -- LOOKING AT THE INDUSTRY 
SELECT distinct INDUSTRY FROM layoffs_staging2;
 
 -- LETS ORDER BY THE INDUSTRY
 SELECT distinct INDUSTRY FROM layoffs_staging2 ORDER BY 1;
  
 -- UPDATE  ANYWHERE WE SEE CRYPTO CURRENCY TO CRYPTO 
 SELECT * FROM LAYOFFS_STAGING2 WHERE INDUSTRY LIKE 'Crypto%';
 
 UPDATE LAYOFFS_STAGING2 
 SET INDUSTRY = 'Crypto'
 WHERE INDUSTRY LIKE 'CRYPTO%';
 
 -- CALLING OUT THE DISTINCT INDUSTRY
 SELECT distinct INDUSTRY FROM layoffs_staging2;
 
 
 -- CALLING OT OUR LAYOFFS_STAGING2 TABLE AGAIN
 SELECT * FROM LAYOFFS_STAGING2;
 
 -- CHECKING OUT THE COUNTRY
SELECT distinct COUNTRY FROM layoffs_staging2 ORDER BY 1;

-- UPDATE  ANYWHERE WE SEE UNITED STATES.TO UNITED STATES 
 UPDATE LAYOFFS_STAGING2
 SET COUNTRY = trim(TRAILING '.' FROM COUNTRY)  -- (TRAILING MEANS DATA OR CHARACTERS THATS  COMING AT THE END OR COMING LATE) 
 WHERE COUNTRY LIKE 'United states%';  
 
 
 -- DATE FORMATING 
 SELECT DATE,
 STR_TO_DATE (date, '%m/%d/%Y') FROM LAYOFFS_STAGING2; 
 
 -- UPDATING DATE 
 UPDATE LAYOFFS_STAGING2
 SET DATE = STR_TO_DATE(date, '%m/%d/%Y');
 
 SELECT DATE FROM LAYOFFS_STAGING2;  -- CALLING OUT THE DATE 
 
 -- UPDATING THE DATE DATATYPE
 ALTER TABLE LAYOFFS_STAGING2
 MODIFY COLUMN  date DATE;
 
 SELECT * FROM LAYOFFS_STAGING2;  -- CALLING OUT OUR TABLE (END OF STANDARDIZING DATA)
 
 -- NULL OR BLANK SPACES
 
 -- CHECKING THE NULL VALUES IN TOTAL_LAID_OFF
 SELECT * FROM LAYOFFS_STAGING2
 WHERE TOTAL_LAID_OFF IS NULL AND PERCENTAGE_LAID_OFF IS NULL;
 
-- POPULATING THE NULL AND BLANK VALUES

 SELECT * 
 FROM LAYOFFS_STAGING2
WHERE INDUSTRY IS NULL OR INDUSTRY = '';

 SELECT * 
 FROM LAYOFFS_STAGING2
 WHERE COMPANY = 'Airbnb';  -- CALLING OUT AIRBNB

-- JOINING AND CHECKING FOR THE BLANK INDUSTRY
SELECT T1.INDUSTRY, T2.INDUSTRY
FROM LAYOFFS_STAGING2 T1
JOIN LAYOFFS_STAGING2 T2
ON T1.COMPANY = T2.COMPANY
WHERE (T1.INDUSTRY IS NULL OR T1.INDUSTRY = '')
AND T2.INDUSTRY IS NOT NULL;

-- UPDATING THE BLACK VALUES 
UPDATE LAYOFFS_STAGING2
SET INDUSTRY = NULL
WHERE INDUSTRY = '';   -- UPDATING THE BLACK VALUES TO NULL FIRST

UPDATE LAYOFFS_STAGING2 T1
JOIN LAYOFFS_STAGING2 T2
ON T1.COMPANY = T2. COMPANY
SET T1.INDUSTRY = T2.INDUSTRY 
WHERE T1.INDUSTRY IS NULL AND T2.INDUSTRY IS NOT NULL;

 -- REMOVING COLUMNS AND ROWS
 SELECT * FROM LAYOFFS_STAGING2
 WHERE TOTAL_LAID_OFF IS NULL AND PERCENTAGE_LAID_OFF IS NULL;
 
 -- DELETING THE NULL VALUES
 DELETE FROM LAYOFFS_STAGING2
 WHERE TOTAL_LAID_OFF IS NULL AND PERCENTAGE_LAID_OFF IS NULL;
 
 SELECT * FROM LAYOFFS_STAGING2;    -- CALLING OUT THE TABLE TO SEE FIT THEY WERE DELETED 
 
 -- DROP THE CREATED ID CAUSE WE ARE DONE WITH IT
ALTER TABLE LAYOFFS_STAGING2
DROP COLUMN ID;

select * from layoffs_staging2;
